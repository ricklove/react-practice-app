{"version":3,"sources":["feature-toggles/toggles.ts","data/columns.ts","components/columns-selector.tsx","components/layout/main-layout.tsx","components/funny-messages.tsx","utils/shuffle.ts","components/blog/blog-list.tsx","components/blog/sample-articles.ts","components/blog/blog-helpers.ts","App.tsx","serviceWorker.js","index.js"],"names":["getToggles","_getToggles","apply","this","arguments","_callee","greetingReponse","greetingValue","json","regenerator_default","a","wrap","_context","prev","next","fetch","sent","ok","greeting","abrupt","stop","columnsData","ColumnsSelector","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectItem","_ref","value","setState","columns","Column","_ref2","id","name","source","react_default","createElement","style","fontWeight","state","map","x","objectSpread","key","title","listbox","options","onChange","multiple","dataKey","optionLabel","itemTemplate","Component","MainLayout","_Component","inherits","createClass","className","header","sidebar","content","footer","getFunnyMessages","i","Math","random","sort","b","FunnyMessages","_id","messages","index","_this2","setInterval","length","clearInterval","BlogList","Post","post","isSelected","onClick","toggle","react_marked_markdown","abstract","selected","articles","forEach","sampleArticles","Array","fill","faker","words","split","toUpperCase","substr","join","lorem","sentence","concat","image","paragraph","trim","match","createAbstract","createArticle","App","isLoading","error","toggles","setTimeout","load","t","progressbar","mode","funny_messages_FunnyMessages","blog_list","columns_selector","main_layout_MainLayout","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAEO,SAAeA,IAAtB,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC2BC,MAAM,uEADjC,UACGT,EADHM,EAAAI,KAGCT,GAAgB,GAChBD,EAAgBW,GAJjB,CAAAL,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAKoBR,EAAgBE,OALpC,OAKOA,EALPI,EAAAI,KAMCT,EAAgBC,EAAKU,SANtB,cAAAN,EAAAO,OAAA,SASI,CACHD,SAAUX,IAVX,yBAAAK,EAAAQ,SAAAf,yCCWMgB,gBC6BEC,cApCX,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAmB,IACpBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAA1B,KAAMoB,KAMVO,WAAa,SAAAC,GAAyC,IAAtCC,EAAsCD,EAAtCC,MACZR,EAAKS,SAAS,CAAEC,QAASF,KARLR,EAWxBW,OAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,GAAIC,EAAPF,EAAOE,KAAMC,EAAbH,EAAaG,OAAb,OACLC,EAAA9B,EAAA+B,cAAA,OAAKJ,GAAIA,GAAIG,EAAA9B,EAAA+B,cAAA,QAAMC,MAAO,CAAEC,WAAY,SAAWL,GAAnD,IAAiEC,IAVjEf,EAAKoB,MAAQ,CACTV,QAAS,IAHOV,wEAiBpB,IAAMU,EAAUb,EAAYa,QAAQW,IAAI,SAAAC,GAAC,OAAArB,OAAAsB,EAAA,EAAAtB,CAAA,GAAUqB,EAAV,CAAaE,IAAKF,EAAET,GAAIY,MAAOH,EAAER,KAAO,IAAMQ,EAAEP,WAEzF,OACIC,EAAA9B,EAAA+B,cAAA,WACID,EAAA9B,EAAA+B,cAAA,qBACAD,EAAA9B,EAAA+B,cAACS,EAAA,QAAD,CACIlB,MAAO7B,KAAKyC,MAAMV,QAClBiB,QAASjB,EACTkB,SAAUjD,KAAK2B,WACfuB,UAAU,EACVC,QAAQ,KACRC,YAAY,QACZC,aAAcrD,KAAKgC,iBA9BTsB,qBCHjBC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAuD,GAAAjC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAiC,GAAAxD,MAAAC,KAAAC,YAAA,OAAAqB,OAAAmC,EAAA,EAAAnC,CAAAiC,EAAAC,GAAAlC,OAAAoC,EAAA,EAAApC,CAAAiC,EAAA,EAAAV,IAAA,SAAAhB,MAAA,WAOQ,OACIQ,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,cACXtB,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,UAAU3D,KAAKoB,MAAMwC,QACpCvB,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,WAAW3D,KAAKoB,MAAMyC,SACrCxB,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,WAAW3D,KAAKoB,MAAM0C,SACrCzB,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,UAAU3D,KAAKoB,MAAM2C,aAZpDR,EAAA,CAAgCD,aCEzB,SAASU,IAeZ,MAdiB,CACb,gBACA,kBACA,oBACA,uBACA,wBACA,gBACA,oBACA,0BACA,uBACA,iBACA,iBACA,qBCfCtB,IAAI,SAAAC,GAAC,MAAK,CAAEA,IAAGsB,EAAGC,KAAKC,YACvBC,KAAK,SAAC7D,EAAG8D,GAAJ,OAAU9D,EAAE0D,EAAII,EAAEJ,IACvBvB,IAAI,SAAAC,GAAC,OAAIA,EAAEA,IDkBb,IAAM2B,EAAb,SAAAd,GAGI,SAAAc,EAAYlD,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAsE,IACpBjD,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAgD,GAAA5C,KAAA1B,KAAMoB,KAHFmD,IAA6B,KAIjClD,EAAKoB,MAAQ,CACT+B,SAAUR,IACVS,MAAO,GAJSpD,EAH5B,OAAAC,OAAAmC,EAAA,EAAAnC,CAAAgD,EAAAd,GAAAlC,OAAAoC,EAAA,EAAApC,CAAAgD,EAAA,EAAAzB,IAAA,oBAAAhB,MAAA,WAWwB,IAAA6C,EAAA1E,KAChBA,KAAKuE,IAAMI,YAAY,WACnBD,EAAK5C,SAAS,CAAE2C,MAAOC,EAAKjC,MAAMgC,MAAQC,EAAKjC,MAAM+B,SAASI,OAASF,EAAKjC,MAAMgC,MAAQ,EAAI,KAC/F,OAdX,CAAA5B,IAAA,uBAAAhB,MAAA,WAkBY7B,KAAKuE,KAAOM,cAAc7E,KAAKuE,KACnCvE,KAAKuE,IAAM,OAnBnB,CAAA1B,IAAA,SAAAhB,MAAA,WAuBQ,OACIQ,EAAA9B,EAAA+B,cAAA,UAAKtC,KAAKyC,MAAM+B,SAASxE,KAAKyC,MAAMgC,YAxBhDH,EAAA,CAAmChB,qBE0CpBwB,sBAxDX,SAAAA,EAAY1D,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAA8E,IACpBzD,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAwD,GAAApD,KAAA1B,KAAMoB,KAOV2D,KAAO,SAAAnD,GAAA,IAAGoD,EAAHpD,EAAGoD,KAAH,OACH3C,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,aACXtB,EAAA9B,EAAA+B,cAAA,MAAIqB,UAAWqB,EAAKC,WAAa,2CAA6C,4CAC1EC,QAASF,EAAKG,QACd9C,EAAA9B,EAAA+B,cAAA,YAAO0C,EAAKlC,QAEhBT,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAWqB,EAAKC,WAAa,oBAAsB,iDACpD5C,EAAA9B,EAAA+B,cAAC8C,EAAA,gBAAD,CAAiBvD,MAAOmD,EAAKC,WAAaD,EAAKlB,QAAUkB,EAAKK,aAEhEL,EAAKC,YAAe5C,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,iBAAiBuB,QAASF,EAAKG,QAAQ9C,EAAA9B,EAAA+B,cAAA,8BAjB5DjB,EAqBxB8D,OAAS,SAACH,GACNA,EAAKC,YAAcD,EAAKC,WACxB,IAAMK,EAAWN,EAAKC,WAAaD,EAAO,KAC1C3D,EAAKS,SAAS,CAAEwD,cAtBhBjE,EAAKoB,MAAQ,CACT8C,SAAUlE,EAAKD,MAAMmE,SAAS7C,IAAI,SAACC,EAAGsB,GAAJ,OAAA3C,OAAAsB,EAAA,EAAAtB,CAAA,GAAgBqB,EAAhB,CAAmBE,IAAKoB,EAAI,OAC9DqB,SAAU,MAJMjE,wEA2Bf,IAAAqD,EAAA1E,KAWLA,KAAKyC,MAAM8C,SAASC,QAAQ,SAAA7C,GACnBA,EAAEwC,SACHxC,EAAEwC,OAAS,kBAAMT,EAAKS,OAAOxC,OAMrC,OACIN,EAAA9B,EAAA+B,cAAA,OAAKqB,UAAU,aACXtB,EAAA9B,EAAA+B,cAAA,UAAKtC,KAAKyC,MAAM8C,SAASX,OAAzB,cAJqB,EAM+B5E,KAAKyC,MAAM8C,SAAS7C,IAAI,SAACC,EAAGsB,GAAJ,OAAW5B,EAAA9B,EAAA+B,cAACoC,EAAKK,KAAN,CAAWlC,IAAKoB,EAAGe,KAAMrC,cAnDzGW,mCC8ChB,IAAMmC,EAA8B,IAAIC,MAAM,KAAKC,KAAK,GAAGjD,IAAI,SAAAC,GAAC,OAdvE,WACI,IAAMG,EAAQ8C,IAAMzB,OAAO0B,QAAQC,MAAM,KAAKpD,IAAI,SAAAC,GAAC,OAAIA,EAAE,GAAGoD,cAAgBpD,EAAEqD,OAAO,KAAIC,KAAK,KACxFnC,EAAU,IAAI4B,MAAM,EAAqB,GAAhBxB,KAAKC,SAAiB,GAAGwB,KAAK,GAAGjD,IAAI,SAAAC,GAEhE,OADc,EAAIuB,KAAKC,SAAY,GAE/B,KAAK,EAAG,MAAO,MAAQyB,IAAMM,MAAMC,SAAS,EAAoB,EAAhBjC,KAAKC,UACrD,KAAK,EAAG,WAAAiC,OAAYR,IAAMzB,OAAO0B,QAAzB,MAAAO,OAAqCR,IAAMzB,OAAOkC,QAAlD,KACR,QAAS,OAAOT,IAAMM,MAAMI,UAAU,EAAoB,EAAhBpC,KAAKC,aAEpD8B,KAAK,QAER,MAAO,CAAEnD,QAAOuC,SClDb,SAAwBvB,GAE3B,OADsBA,EAAQyC,OAAOC,MAAM,gBAAkB,IAAI,GAC7CD,OD+CHE,CAAe3C,GACNA,WAG6C4C,KEgD5DC,cAhFb,SAAAA,EAAYvF,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAA2G,IACtBtF,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAqF,GAAAjF,KAAA1B,KAAMoB,KACDqB,MAAQ,CACXmE,WAAW,EACXC,OAAO,EACPC,QAAS,CAAE/F,UAAU,IAIvBgG,WAAW,WACT1F,EAAK2F,QACJ,KAXmB3F,6MAgBJxB,WAAVoH,SACNjH,KAAK8B,SAAS,CACZ8E,WAAW,EACXE,QAASG,oDAGXjH,KAAK8B,SAAS,CACZ+E,OAAO,gJAOX,GAAI7G,KAAKyC,MAAMoE,MACb,OACExE,EAAA9B,EAAA+B,cAAA,6BAMJ,GAAItC,KAAKyC,MAAMmE,UACb,OACEvE,EAAA9B,EAAA+B,cAAA,WACED,EAAA9B,EAAA+B,cAAC4E,EAAA,YAAD,CAAaC,KAAK,kBAClB9E,EAAA9B,EAAA+B,cAAA,wBAGAD,EAAA9B,EAAA+B,cAAA,WACED,EAAA9B,EAAA+B,cAAC8E,EAAD,QAMR,IAEMtD,EAFU9D,KAAKyC,MAAMqE,QAEH/F,SACtBsB,EAAA9B,EAAA+B,cAAA,WACED,EAAA9B,EAAA+B,cAAA,yBAGAD,EAAA9B,EAAA+B,cAAC+E,EAAD,CAAU9B,SAAUE,KAGpBpD,EAAA9B,EAAA+B,cAAA,kCAKEuB,EAAWxB,EAAA9B,EAAA+B,cAACgF,EAAD,MAEjB,OACEjF,EAAA9B,EAAA+B,cAAA,WACED,EAAA9B,EAAA+B,cAACiF,EAAD,CACEzD,QAASA,EACTD,QAASA,YA9EDP,aCJEkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAOxF,EAAA9B,EAAA+B,cAACwF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6afa2f3e.chunk.js","sourcesContent":["import { PromiseType } from \"../utils/type-utils\";\r\n\r\nexport async function getToggles() {\r\n    const greetingReponse = await fetch(\"https://raw.githubusercontent.com/Nimrod007/someRepo/master/ft.json\");\r\n\r\n    let greetingValue = false;\r\n    if (greetingReponse.ok) {\r\n        const json = await greetingReponse.json();\r\n        greetingValue = json.greeting;\r\n    }\r\n\r\n    return {\r\n        greeting: greetingValue,\r\n    };\r\n}\r\n\r\nexport type Toggles = PromiseType<ReturnType<typeof getToggles>>;","import columnsDataRaw from \"./columns.json\";\r\n\r\nexport interface IColumnsData {\r\n    columns_count: number;\r\n    columns: IColumnData[];\r\n}\r\nexport interface IColumnData {\r\n    name: string;\r\n    id: string;\r\n    type: string;\r\n    source: string;\r\n}\r\n\r\nexport const columnsData = columnsDataRaw as IColumnsData;","import React, { Component } from \"react\";\r\nimport { columnsData, IColumnData } from \"../data/columns\";\r\nimport { ListBox } from \"primereact/listbox\";\r\n\r\n\r\nclass ColumnsSelector extends Component<{}, { columns: IColumnData[] }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            columns: []\r\n        };\r\n    }\r\n\r\n    selectItem = ({ value }: { value: IColumnData[] }) => {\r\n        this.setState({ columns: value });\r\n    }\r\n\r\n    Column = ({ id, name, source }: IColumnData) => (\r\n        <div id={id}><span style={{ fontWeight: \"bold\" }}>{name}</span> {source}</div>\r\n    )\r\n\r\n    render() {\r\n\r\n        const columns = columnsData.columns.map(x => ({ ...x, key: x.id, title: x.name + \" \" + x.source }));\r\n\r\n        return (\r\n            <div>\r\n                <h3>Columns</h3>\r\n                <ListBox\r\n                    value={this.state.columns}\r\n                    options={columns}\r\n                    onChange={this.selectItem}\r\n                    multiple={true}\r\n                    dataKey=\"id\"\r\n                    optionLabel=\"title\"\r\n                    itemTemplate={this.Column}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColumnsSelector;","import React, { Component } from \"react\";\r\n\r\nexport class MainLayout extends Component<{\r\n    content: JSX.Element,\r\n    header?: JSX.Element,\r\n    sidebar?: JSX.Element,\r\n    footer?: JSX.Element,\r\n}> {\r\n    render() {\r\n        return (\r\n            <div className='mainLayout'>\r\n                <div className='header'>{this.props.header}</div>\r\n                <div className='sidebar'>{this.props.sidebar}</div>\r\n                <div className='content'>{this.props.content}</div>\r\n                <div className='footer'>{this.props.footer}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { shuffle } from \"../utils/shuffle\";\r\n\r\nexport function getFunnyMessages() {\r\n    const messages = [\r\n        \"Finding ducks\",\r\n        \"Milking spiders\",\r\n        \"Empowering Gnomes\",\r\n        \"Inspecting Cucumbers\",\r\n        \"Refactoring Shoelaces\",\r\n        \"Coding Coffee\",\r\n        \"Training Penguins\",\r\n        \"Challenging Assumptions\",\r\n        \"Delivering Obstacles\",\r\n        \"Breaking Dance\",\r\n        \"Avoiding Edges\",\r\n        \"Cleaning Monitors\",\r\n    ];\r\n    return shuffle(messages);\r\n}\r\n\r\nexport class FunnyMessages extends Component<{}, { messages: string[], index: number }> {\r\n    private _id: NodeJS.Timeout | null = null;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            messages: getFunnyMessages(),\r\n            index: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._id = setInterval(() => {\r\n            this.setState({ index: this.state.index < this.state.messages.length ? this.state.index + 1 : 0 });\r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this._id) { clearInterval(this._id); }\r\n        this._id = null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h3>{this.state.messages[this.state.index]}</h3>\r\n        );\r\n    }\r\n}","export function shuffle<T>(items: T[]) {\r\n    return items\r\n        .map(x => ({ x, i: Math.random() }))\r\n        .sort((a, b) => a.i - b.i)\r\n        .map(x => x.x);\r\n}","import React, { Component } from \"react\";\r\nimport { IBlogPost } from \"./blog-types\";\r\nimport { MarkdownPreview } from 'react-marked-markdown';\r\nimport { Accordion, AccordionTab } from \"primereact/accordion\";\r\nimport \"./blog.css\";\r\n\r\ntype IBlogPostViewModel = IBlogPost & { key: string, isSelected?: boolean, toggle?: () => void };\r\nclass BlogList extends Component<{ articles: IBlogPost[] }, { articles: IBlogPostViewModel[], selected: null | IBlogPostViewModel }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            articles: this.props.articles.map((x, i) => ({ ...x, key: i + '' })),\r\n            selected: null,\r\n        };\r\n    }\r\n\r\n    Post = ({ post }: { post: IBlogPostViewModel }) => (\r\n        <div className='blog-post'>\r\n            <h1 className={post.isSelected ? 'blog-post-title blog-post-title-expanded' : 'blog-post-title blog-post-title-collapsed'}\r\n                onClick={post.toggle}>\r\n                <span>{post.title}</span>\r\n            </h1>\r\n            <div className={post.isSelected ? 'blog-post-content' : 'blog-post-content blog-post-content-collapsed'}>\r\n                <MarkdownPreview value={post.isSelected ? post.content : post.abstract} />\r\n            </div>\r\n            {!post.isSelected && (<div className='blog-post-more' onClick={post.toggle}><div>Read More...</div></div>)}\r\n        </div>\r\n    );\r\n\r\n    toggle = (post: IBlogPostViewModel) => {\r\n        post.isSelected = !post.isSelected;\r\n        const selected = post.isSelected ? post : null;\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n\r\n        // // Using Accordion\r\n        // return (\r\n        //     <Accordion multiple={true}>\r\n        //         {this.state.articles.map(x => (\r\n        //             <AccordionTab header={x.title}><MarkdownPreview value={x.content} /></AccordionTab>\r\n        //         ))}\r\n        //     </Accordion>\r\n        // );\r\n\r\n        this.state.articles.forEach(x => {\r\n            if (!x.toggle) {\r\n                x.toggle = () => this.toggle(x);\r\n            }\r\n        });\r\n\r\n        const shouldHideUnselected = false;\r\n\r\n        return (\r\n            <div className='blog-list'>\r\n                <h3>{this.state.articles.length} Articles</h3>\r\n                {(shouldHideUnselected && !!this.state.selected) && <this.Post post={this.state.selected} />}\r\n                {(!shouldHideUnselected || !this.state.selected) && this.state.articles.map((x, i) => (<this.Post key={i} post={x} />))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BlogList;","import { IBlogPost } from \"./blog-types\";\r\nimport { createAbstract } from \"./blog-helpers\";\r\nimport faker from \"faker\";\r\n\r\n// const sampleArticle = `\r\n// # Article Title\r\n\r\n// This is a paragraph that contains the many words that can make up a paragraph.\r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n\r\n// ## Sub Title A\r\n\r\n// This is a paragraph that contains the many words that can make up a paragraph.\r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n\r\n// ## Sub Title B\r\n\r\n// This is a paragraph that contains the many words that can make up a paragraph.\r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n\r\n// ## Sub Title C\r\n\r\n// This is a paragraph that contains the many words that can make up a paragraph.\r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n// This is a paragraph that contains the many words that can make up a paragraph. \r\n// `;\r\n\r\n// export const sampleArticles: IBlogPost[] = [\r\n//     { title: \"Title 0\", abstract: createAbstract(sampleArticle), content: sampleArticle },\r\n//     { title: \"Title 1\", abstract: createAbstract(sampleArticle), content: sampleArticle.replace('Title', 'Title 01') },\r\n//     { title: \"Title 2\", abstract: createAbstract(sampleArticle), content: sampleArticle.replace('Title', 'Title 02') },\r\n//     { title: \"Title 3\", abstract: createAbstract(sampleArticle), content: sampleArticle.replace('Title', 'Title 03') },\r\n//     { title: \"Title 4\", abstract: createAbstract(sampleArticle), content: sampleArticle.replace('Title', 'Title 04') },\r\n//     { title: \"Title 5\", abstract: createAbstract(sampleArticle), content: sampleArticle.replace('Title', 'Title 05') },\r\n// ];\r\n\r\nfunction createArticle(): IBlogPost {\r\n    const title = faker.random.words().split(' ').map(x => x[0].toUpperCase() + x.substr(1)).join(' ');\r\n    const content = new Array(5 + (Math.random() * 10) | 0).fill(0).map(x => {\r\n        const type = (5 * Math.random()) | 0;\r\n        switch (type) {\r\n            case 1: return '## ' + faker.lorem.sentence(1 + Math.random() * 2);\r\n            case 2: return `![${faker.random.words()}](${faker.random.image()})`;\r\n            default: return faker.lorem.paragraph(2 + Math.random() * 5);\r\n        }\r\n    }).join('\\n\\n');\r\n    const abstract = createAbstract(content);\r\n    return { title, abstract, content };\r\n}\r\n\r\nexport const sampleArticles: IBlogPost[] = new Array(100).fill(0).map(x => createArticle());","export function createAbstract(content: string) {\r\n    const firstSection = (content.trim().match(/(^#+|[^#])+/) || [])[0];\r\n    return firstSection.trim();\r\n}","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"primereact/resources/themes/luna-blue/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeicons/primeicons.css\";\nimport \"./App.css\";\nimport \"./components/layout/layout.css\";\nimport \"./styles/main.css\";\nimport { getToggles, Toggles } from \"./feature-toggles/toggles\";\nimport ColumnsSelector from \"./components/columns-selector\";\nimport { ProgressBar } from \"primereact/progressbar\";\nimport { MainLayout } from \"./components/layout/main-layout\";\nimport { FunnyMessages } from \"./components/funny-messages\";\nimport BlogList from \"./components/blog/blog-list\";\nimport { sampleArticles } from \"./components/blog/sample-articles\";\n\nclass App extends Component<{}, {\n  isLoading: boolean,\n  error: boolean,\n  toggles: Toggles,\n}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      error: false,\n      toggles: { greeting: false },\n    };\n\n    // Simulate slow load\n    setTimeout(() => {\n      this.load();\n    }, 3000);\n  }\n\n  async load() {\n    try {\n      const t = await getToggles();\n      this.setState({\n        isLoading: false,\n        toggles: t,\n      });\n    } catch {\n      this.setState({\n        error: true,\n      });\n    }\n  }\n\n  render() {\n\n    if (this.state.error) {\n      return (\n        <h1>\n          Oops, it broke!\n        </h1>\n      );\n    }\n\n    if (this.state.isLoading) {\n      return (\n        <div>\n          <ProgressBar mode=\"indeterminate\" />\n          <h1>\n            Loading...\n          </h1>\n          <div>\n            <FunnyMessages />\n          </div>\n        </div>\n      );\n    }\n\n    const toggles = this.state.toggles;\n\n    const content = toggles.greeting ? (\n      <div>\n        <h1>\n          Hello World\n        </h1>\n        <BlogList articles={sampleArticles} />\n      </div>\n    ) : (\n        <h1>\n          Sorry, we're Closed!\n      </h1>\n      );\n\n    const sidebar = (<ColumnsSelector />);\n\n    return (\n      <div>\n        <MainLayout\n          content={content}\n          sidebar={sidebar}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}